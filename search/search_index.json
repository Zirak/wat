{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude40 WAT Inspector","text":"GitHub     -     PyPI     -     Documentation <p>Deep inspection of Python objects.</p> <p>WAT is a powerful inspection tool that allows you to delve into and examine unknown objects at runtime.</p> <p>\"Wat\" is a variant of the English word \"what\" that is often used to express confusion or disgust</p> <p>If you find yourself deep within the Python console, feeling dazed and confused, wondering \"WAT? What's that thing?\", that's where the <code>wat</code> inspector comes in handy.</p> <p>Start the Python Interpreter (or attach to one) and execute <code>wat / object</code> on any <code>object</code> to investigate its type, formatted value, variables, methods, parent types, signature, documentation, and even its source code. Alternatively, you can use <code>wat(object)</code> syntax.</p> <p></p>"},{"location":"#import","title":"Import","text":""},{"location":"#insta-load","title":"Insta-Load","text":"<p>If you want to quickly debug something, you can use this inspector without installing anything, in the same session.</p> <p>Load it on the fly by pasting this snippet to your Python interpreter: <pre><code>import base64, zlib\ncode = b'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'\nexec(zlib.decompress(base64.b64decode(code)).decode(), globals())\n</code></pre></p> <p>Now you can use <code>wat</code> object.</p> <p>Warning</p> <p>Before executing Insta-Load snippet, it's recommended to verify what you're about to run. If you feel uncomfortable, you can either:</p> <ul> <li>Verify what's inside the extracted code beforehand:   <pre><code>print(zlib.decompress(base64.b64decode(code)).decode())\n</code></pre></li> <li>Paste the content of inspection.py into your interpreter.   It has the same effect.</li> <li>Install package with pip and review the code.</li> </ul>"},{"location":"#install-with-pip","title":"Install with pip","text":"<p>Alternatively, install wat-inspector package and import inspection tool from wat module: <pre><code>pip install wat-inspector\n</code></pre> <pre><code>import wat\n</code></pre></p>"},{"location":"#usage-modifiers","title":"Usage &amp; modifiers","text":"<p><code>wat</code> object can quickly inspect things by using the division operator (for faster typing without parentheses).  A short syntax <code>wat / object</code> is equivalent to <code>wat(object)</code>.</p> <p>You can call <code>wat.modifiers / object</code> with the following modifiers:</p> <ul> <li><code>.short</code> or <code>.s</code> to hide attributes (variables and methods)</li> <li><code>.long</code> to show non-abbreviated values and documentation</li> <li><code>.dunder</code> to display dunder attributes</li> <li><code>.code</code> to reveal the source code of a function, method, or class</li> <li><code>.nodocs</code> to hide documentation for functions and classes</li> <li><code>.all</code> to include all available information</li> <li><code>.ret</code> to return the inspected object</li> </ul> <p>You can chain modifiers, e.g. <code>wat.long.dunder.nodocs / object</code>.</p> <p>Call <code>wat.locals</code> or <code>wat()</code> to inspect <code>locals()</code> variables. Call <code>wat.globals</code> to inspect <code>globals()</code> variables.</p> <p>Type <code>wat</code> in the interpreter to learn more about this object itself.</p> <p>There are several alternative syntaxes that are equivalent. Choose the one that works best for you: <pre><code>wat.short / 'foo'  # fast typing\nwat.short('foo')\nwat('foo', short=True)  # natural Python syntax\n'foo' | wat.short  # similar to piping in Unix\n</code></pre></p>"},{"location":"#use-cases-examples","title":"Use Cases Examples","text":""},{"location":"#determine-type","title":"Determine type","text":"<p>In a dynamic typing language like Python, it's often hard to determine the type of an object. WAT Inspector can help you with that by showing the name of the type with the module it comes from.</p> <pre><code>&gt;&gt;&gt; wat.short / (1,)\nvalue: (1,)\ntype: tuple\nlen: 1\n</code></pre> <pre><code>&gt;&gt;&gt; wat.short / {None}\nvalue: {None}\ntype: set\nlen: 1\n</code></pre> <pre><code>&gt;&gt;&gt; wat.short / user\nstr: admin\nrepr: &lt;User: admin&gt;\ntype: django.contrib.auth.models.User\nparents: django.contrib.auth.models.AbstractUser, django.contrib.auth.base_user.AbstractBaseUser, django.contrib.auth.models.PermissionsMixin, django.db.models.base.Model, django.db.models.utils.AltersData\n</code></pre> <p></p> <p>Now that you've identified the actual type, you can put the type annotations in your code to reduce the confusion.</p>"},{"location":"#look-up-methods","title":"Look up methods","text":"<p>Listing methods, functions and looking up their signature is extremely beneficial to see how to use them. Plus, you can read their docstrings.</p> <pre><code>wat / 'stringy'\n</code></pre> <p></p> <p></p> <p>Use <code>wat.long</code> if you want to see full doscstrings.</p>"},{"location":"#discover-functions-signature","title":"Discover function's signature","text":"<p>See the docstrings and the signature of a function or a method to see how to use it.</p> <pre><code>wat / str.split\n</code></pre> <p></p>"},{"location":"#look-up-attributes","title":"Look up attributes","text":"<p>List the attribues and their types to see what's really inside the inspected object. <pre><code>wat / re.match('(\\d)_(.*)', '1_title')\n</code></pre></p> <p></p>"},{"location":"#explore-modules","title":"Explore modules","text":"<p>One of the use cases is to explore modules. For instance you can list functions, classes and the sub-modules of a selected module.</p> <pre><code>import pathlib\nwat / pathlib\n</code></pre> <p></p> <p>Then, you can navigate further, e.g. <code>wat / pathlib.fnmatch</code>.</p>"},{"location":"#explore-dunder-attributes","title":"Explore dunder attributes","text":"<p>By default, WAT Inspector hides attributes starting with <code>__</code>. Use <code>wat.dunder</code> to see them. <pre><code>wat.dunder / {}\n</code></pre></p> <p></p>"},{"location":"#review-the-code","title":"Review the code","text":"<p>Look up the source code of a function to see how it really works.</p> <pre><code>import re\nwat.code / re.match\n</code></pre> <p></p>"},{"location":"#debug-with-breakpoint","title":"Debug with breakpoint","text":"<p>You can use Python's <code>breakpoint()</code> keyword to launch an interactive debugger in your program:</p> <pre><code>logger.debug('init')\nx = {'what is it?'}\nbreakpoint()\nlogger.debug('done')\n</code></pre> <pre><code>(Pdb) import wat  # or paste insta-load snippet\n(Pdb) wat / x  # inspect local variable\n...\n(Pdb) c  # continue execution\n</code></pre>"},{"location":"#explore-python-built-ins","title":"Explore Python built-ins","text":"<pre><code>wat / __builtins__\n</code></pre>"},{"location":"#look-up-local-variables","title":"Look up local variables","text":"<pre><code>wat()\n# or\nwat.locals\n</code></pre>"},{"location":"#look-up-global-variables","title":"Look up global variables","text":"<pre><code>wat.globals\n</code></pre>"},{"location":"img/screenshot-playbook/","title":"Screenshot playbook","text":""},{"location":"img/screenshot-playbook/#wat-intro-setpng","title":"wat-intro-set.png","text":"<p><pre><code>python -m IPython\n</code></pre> <pre><code>import wat\nwat / {42}\n</code></pre></p>"},{"location":"img/screenshot-playbook/#wat-datetimepng","title":"wat-datetime.png","text":"<p><pre><code>python -m IPython\n</code></pre> <pre><code>import wat\nfrom datetime import datetime\nwat / datetime.now()\n</code></pre></p>"}]}